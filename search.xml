<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue.config.js配置，踩坑和存档</title>
      <link href="/2020/09/13/vue-config-js-pei-zhi-cai-keng-he-cun-dang/"/>
      <url>/2020/09/13/vue-config-js-pei-zhi-cai-keng-he-cun-dang/</url>
      
        <content type="html"><![CDATA[<p><img src=".%5Cvue-config-js%E9%85%8D%E7%BD%AE%EF%BC%8C%E8%B8%A9%E5%9D%91%E5%92%8C%E5%AD%98%E6%A1%A3%5Cerror.jpg" alt="报错"></p><p>安装sass</p><pre><code>npm install sass</code></pre><p>css预设器的配置项</p><pre><code>loaderOptions: {        sass: {          // 这里的选项会传递给 css-loader          prependData: '@import "./src/styles/main.scss";'        }      }</code></pre><p>完整配置</p><pre><code>const path = require('path');module.exports = {    // 部署应用包时的基本 URL    publicPath: process.env.NODE_ENV === 'production' ? '' : '/',    // 运行 vue-cli-service build 时生成的生产环境构建文件的目录    // 默认构建前清除文件夹(构建时传入 --no-clean 可关闭该行为    outputDir: process.env.NODE_ENV === 'production' ? 'dist' : 'devdist',    // eslint-loader 是否在保存的时候检查    lintOnSave: true,    //webpack配置    chainWebpack: (config) =&gt; {    },    // webpack 配置，键值对象时会合并配置，为方法时会改写配置    // https://cli.vuejs.org/guide/webpack.html#simple-configuration    configureWebpack: {    },    //生产环境是否生成sourceMap文件    productionSourceMap: false,    // 配置高于chainWebpack中关于 css loader 的配置    css: {      //是否使用css分离插件      extract: true,      // 是否构建样式地图，设置为 true 之后可能会影响构建的性能      sourceMap: false,      modules: false,      // css预设器配置项      loaderOptions: {        sass: {          // 这里的选项会传递给 css-loader          prependData: '@import "./src/styles/main.scss";'        }      }    },    // 构建时开启多进程处理 babel 编译    // 是否为 Babel 或 TypeScript 使用 thread-loader    parallel: require('os').cpus().length &gt; 1,    pwa: {},    devServer: {      open: false,      host: '0.0.0.0',      port: 8080,      https: false,      hot: true,      hotOnly: false,      // 将任何未知请求 (没有匹配到静态文件的请求) 代理到该字段指向的地方       proxy: null,      overlay: {          warnings: true,          error: true      },      before: app =&gt; {      }    },    // 第三方插件配置    pluginOptions: {}  };  const path = require('path');module.exports = {    // 部署应用包时的基本 URL    publicPath: process.env.NODE_ENV === 'production' ? '' : '/',    // 运行 vue-cli-service build 时生成的生产环境构建文件的目录    // 默认构建前清除文件夹(构建时传入 --no-clean 可关闭该行为    outputDir: process.env.NODE_ENV === 'production' ? 'dist' : 'devdist',    // eslint-loader 是否在保存的时候检查    lintOnSave: true,    //webpack配置    chainWebpack: (config) =&gt; {    },    // webpack 配置，键值对象时会合并配置，为方法时会改写配置    // https://cli.vuejs.org/guide/webpack.html#simple-configuration    configureWebpack: {    },    //生产环境是否生成sourceMap文件    productionSourceMap: false,    // 配置高于chainWebpack中关于 css loader 的配置    css: {      //是否使用css分离插件      extract: true,      // 是否构建样式地图，设置为 true 之后可能会影响构建的性能      sourceMap: false,      modules: false,      // css预设器配置项      loaderOptions: {        sass: {          // 这里的选项会传递给 css-loader          prependData: '@import "./src/styles/main.scss";'        }      }    },    // 构建时开启多进程处理 babel 编译    // 是否为 Babel 或 TypeScript 使用 thread-loader    parallel: require('os').cpus().length &gt; 1,    pwa: {},    devServer: {      open: false,      host: '0.0.0.0',      port: 8080,      https: false,      hot: true,      hotOnly: false,      // 将任何未知请求 (没有匹配到静态文件的请求) 代理到该字段指向的地方       proxy: null,      overlay: {          warnings: true,          error: true      },      before: app =&gt; {      }    },    // 第三方插件配置    pluginOptions: {}  };</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0笔记1_项目构建</title>
      <link href="/2020/09/12/vue3-0/"/>
      <url>/2020/09/12/vue3-0/</url>
      
        <content type="html"><![CDATA[<h2 id="安装node-js（官网下载安装即可）"><a href="#安装node-js（官网下载安装即可）" class="headerlink" title="安装node.js（官网下载安装即可）"></a>安装node.js（官网下载安装即可）</h2><p>查看版本号</p><pre><code>node -vnpm -v</code></pre><p>出现版本号即安装成功。（如果未出现，重启电脑试试，node8、9或以上版本）</p><h2 id="全局安装vue-cli3-0脚手架"><a href="#全局安装vue-cli3-0脚手架" class="headerlink" title="全局安装vue-cli3.0脚手架"></a>全局安装vue-cli3.0脚手架</h2><p>卸载：如果已经全局安装了旧的版本的vue-cli，需要先卸载：</p><pre><code>npm uninstall vue-cli -g</code></pre><p>安装</p><pre><code>npm install -g @vue/cli</code></pre><p>查看版本号，出现版本号即安装成功</p><pre><code>vue -V</code></pre><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>配置信息要选择Merge（合并），不然git中的内容会消失，项目需要的东西要手动选择，选择：Babel,Router,Vuex,CSS-Pre-processors,Linter / Formatter</p><pre><code>vue create vue_admin</code></pre><h2 id="路由是否采用history模式"><a href="#路由是否采用history模式" class="headerlink" title="路由是否采用history模式"></a>路由是否采用history模式</h2><p>hash ——即地址栏URL中的#符号，如：<a href="http://www.abc.com/#/head">http://www.abc.com/#/head</a></p><p>history ——利用了HTML5 History Interface中新增的pushState()和replaceState()方法。（这个方法是面试中常问到的，怎么去除URL中的#，此方法需要后端Apache或Nginx进行简单的路由配置，否则会报404）</p><p>注：这两个配置就是解决URL中有没有#的问题</p><pre><code>(Requires proper server setup for index fallback in production) (Y/n) </code></pre><h2 id="css预编译器"><a href="#css预编译器" class="headerlink" title="css预编译器"></a>css预编译器</h2><p>选择Sass/SCSS (with node-sass)之后 Pick a linter / formatter config: Prettier</p><h2 id="选择何时进行代码检测"><a href="#选择何时进行代码检测" class="headerlink" title="选择何时进行代码检测"></a>选择何时进行代码检测</h2><p>选择Lint on save，保存的时候进行监测</p><h2 id="选择Babel，PostCSS，ESLint等配置文件存放的位置"><a href="#选择Babel，PostCSS，ESLint等配置文件存放的位置" class="headerlink" title="选择Babel，PostCSS，ESLint等配置文件存放的位置"></a>选择Babel，PostCSS，ESLint等配置文件存放的位置</h2><p>选择In dedicated config files</p><h2 id="最后是否保存选择的配置"><a href="#最后是否保存选择的配置" class="headerlink" title="最后是否保存选择的配置"></a>最后是否保存选择的配置</h2><p>选择不保存，下次重新配置</p><h2 id="完整选择截图"><a href="#完整选择截图" class="headerlink" title="完整选择截图"></a>完整选择截图</h2><p><img src="https://raw.githubusercontent.com/Cheng-pipi/Cheng-pipi.github.iogithub/master/vue3-0/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E9%80%89%E6%8B%A9.png"></p><pre><code>cd vue_adminnpm run serve</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>皮皮的错误记录</title>
      <link href="/2020/09/10/pipi/"/>
      <url>/2020/09/10/pipi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Cheng-pipi/Cheng-pipi.github.iogithub/master/%E6%B5%8B%E8%AF%95%E5%9B%BE%E5%BA%8A/stupiddog.gif" alt="stupiddog"></p><p>打醒你，还看</p><p><img src="C:\Users\CR\AppData\Roaming\Typora\typora-user-images\image-20200912210505583.png" alt="image-20200912210505583"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> dog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基础命令</title>
      <link href="/2020/09/10/git/"/>
      <url>/2020/09/10/git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h2><h3 id="拷贝项目"><a href="#拷贝项目" class="headerlink" title="拷贝项目"></a>拷贝项目</h3><pre><code class="bash">git clone 仓库地址</code></pre><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><pre><code class="bash">git branch dev</code></pre><p>master：主分支，一般都不会在此分支上开发项目</p><p>dev：开发分支，一般在此分支上开发</p><h3 id="创建并进入分支"><a href="#创建并进入分支" class="headerlink" title="创建并进入分支"></a>创建并进入分支</h3><pre><code class="bash">git checkout -b name</code></pre><h3 id="切分支"><a href="#切分支" class="headerlink" title="切分支"></a>切分支</h3><pre><code>git checkout name</code></pre><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><pre><code class="bash">git status</code></pre><h3 id="添加所有文件"><a href="#添加所有文件" class="headerlink" title="添加所有文件"></a>添加所有文件</h3><pre><code>git add .</code></pre><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><pre><code>git commit -m '这里是当前提交的描述'</code></pre><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><pre><code>git pull        </code></pre><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><pre><code>git push</code></pre><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><pre><code>git branch --list</code></pre><h3 id="查看分支（包干远程分支）"><a href="#查看分支（包干远程分支）" class="headerlink" title="查看分支（包干远程分支）"></a>查看分支（包干远程分支）</h3><pre><code>git branch -a</code></pre><h3 id="版本分支"><a href="#版本分支" class="headerlink" title="版本分支"></a>版本分支</h3><p>建于当前dev分支下面,feature-vue_amin-V1.0.0-20200912，其中，</p><p>feature：描述当前分支类型（需求）</p><p>vue_admin：项目名称</p><p>V1.0.0：版本号</p><p>20200912：创建分支日期</p><pre><code>git checkout -b feature-vue_amin-V1.0.0-20200912git pushgit push --set-upstream origin feature-vue_amin-V1.0.0-20200912</code></pre><h3 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h3><p>建立于当前版本分支下面</p><pre><code></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
